{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "animated-counter",
  "type": "registry:ui",
  "description": "Un compteur animé qui incrémente progressivement vers une valeur cible",
  "dependencies": [
    "clsx",
    "tailwind-merge"
  ],
  "files": [
    {
      "path": "registry/new-york/components/animated-counter/animated-counter.tsx",
      "content": "import { useState, useEffect, useRef } from 'react'\nimport { cn } from '@/lib/utils'\n\n/**\n * Props pour le composant AnimatedCounter\n */\nexport interface AnimatedCounterProps {\n  /** Valeur finale du compteur */\n  value: number\n  /** Durée de l'animation en ms */\n  duration?: number\n  /** Préfixe (ex: '$') */\n  prefix?: string\n  /** Suffixe (ex: '%') */\n  suffix?: string\n  /** Nombre de décimales */\n  decimals?: number\n  /** Classes CSS additionnelles */\n  className?: string\n  /** Ref optionnelle (React 19) */\n  ref?: React.Ref<HTMLSpanElement>\n}\n\n/**\n * Compteur animé qui incrémente progressivement vers une valeur cible\n * @component\n * @example\n * ```tsx\n * <AnimatedCounter value={1234} prefix=\"$\" duration={2000} />\n * ```\n */\nexport function AnimatedCounter({\n  value,\n  duration = 1000,\n  prefix = '',\n  suffix = '',\n  decimals = 0,\n  className,\n  ref\n}: AnimatedCounterProps) {\n  const [displayValue, setDisplayValue] = useState(0)\n  const previousValue = useRef(0)\n\n  useEffect(() => {\n    const startValue = previousValue.current\n    const startTime = Date.now()\n    const endValue = value\n\n    const updateValue = () => {\n      const now = Date.now()\n      const progress = Math.min((now - startTime) / duration, 1)\n\n      // Easing function pour une animation plus naturelle\n      const easeOutQuart = 1 - Math.pow(1 - progress, 4)\n      const currentValue = startValue + (endValue - startValue) * easeOutQuart\n\n      setDisplayValue(currentValue)\n\n      if (progress < 1) {\n        requestAnimationFrame(updateValue)\n      } else {\n        previousValue.current = endValue\n      }\n    }\n\n    requestAnimationFrame(updateValue)\n  }, [value, duration])\n\n  return (\n    <span ref={ref} className={cn('tabular-nums', className)}>\n      {prefix}\n      {displayValue.toFixed(decimals)}\n      {suffix}\n    </span>\n  )\n}\n",
      "type": "registry:ui"
    }
  ]
}